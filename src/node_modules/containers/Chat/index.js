import React, { Component} from 'react';
import PropTypes from 'prop-types';
import * as actions from '../../reducers/actions';
import {receiveAuth} from '../../reducers/authActions';
import Chat from '../../components/Chat/Chat';
import { bindActionCreators } from 'redux';
import { connect } from 'react-redux';
import io from 'socket.io-client';
import uuid from 'node-uuid'
import cookie from 'react-cookie';

const socket = io('', { path: 'http://localhost:9010/api/chat' });
const initialChannel = 'Lobby'; // NOTE: I hard coded this value for my example.  Change this as you see fit

class ChatContainer extends Component {
  componentDidMount() {
    const { dispatch, user } = this.props;
    let deviceToken = window.localStorage.getItem('deviceToken');
    if(!cookie.load('username')) {
      const userObj = {
        username: "test",
        token: `${Date.now()}${uuid.v4()}`,
      };
      this.props.signUp(userObj).then((data) => {
        console.log("response ", data);
      });
    }
    else {
      const user = {token:cookie.load('token')};
      this.props.signIn(user);
    }
    // if(!user.username) {
    //   dispatch(receiveAuth());
    // }
    // dispatch(actions.fetchMessages(initialChannel));
    // dispatch(actions.fetchChannels(user.username));
  }
  render() {
    return (
      <Chat {...this.props} socket={socket} />
    );
  }
}
ChatContainer.propTypes = {
  messages: PropTypes.array.isRequired,
  user: PropTypes.object.isRequired,
  dispatch: PropTypes.func.isRequired,
  channels: PropTypes.array.isRequired,
  activeChannel: PropTypes.string.isRequired,
  typers: PropTypes.array.isRequired
}

function mapStateToProps(state) {
  return {
      messages: state.messages.data,
      channels: state.channels.data,
      activeChannel: state.activeChannel.name,
      user: state.auth.user,
      typers: state.typers,
      screenWidth: state.environment.screenWidth
  }
}
export default connect(mapStateToProps)(ChatContainer)
